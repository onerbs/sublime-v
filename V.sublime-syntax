%YAML 1.2
---
name: V
scope: source.v
file_extensions: [v, vh, vv, vsh]
foldingStartMarker: '[\{\(]$'
foldingStopMarker: '^\s*[\)\}]$'

variables:
  re__escaped: \\([\\\$tvnrbfae''"]|x\h{2}|\d{,3})

  re_attrib: 'deprecated|direct_array_access|heap|if|inline|live|manualfree|ref_only|trusted|typedef|unsafe|windows_stdcall'
  re_builtin: 'exit|error|panic|e?print(?:ln)?|print_backtrace'
  re_type_numeric: 'any_(?:int|float)|byte|u16|u32|u64|u128|int|i16|i64|i128|i8|f32|f64'
  re_type_primitive: 'any|bool|cha[rn]|rune|u?string|size_t|(?:byte|char|void)ptr'
  re_os: '(mac|macos|darwin|linux|windows|freebsd|openbsd|netbsd|dragonfly|android|solaris|haiku)'
  re_compiler: '(gcc|tinyc|clang|mingw|msvc|cplusplus)'
  re_platform: '(amd64|aarch64|x64|x32|little_endian|big_endian)'
  re_other: '(debug|test|js|glibc|prealloc|no_bounds_checking)'
  re_at_token: '@(?:FN|METHOD|MOD|STRUCT|VEXE|FILE|LINE|COLUMN|VHASH|VMOD_FILE|VROOT)'
  re_name_regular: '[a-z][a-z\d_]*'
  re_type_class: '[A-Z][A-Za-z\d_]*'

contexts:
  main:
    - include: Module
    - include: Directive
    - include: Import

    - include: Enum
    - include: Struct
    - include: Function
    - match: ^\[
      scope: punctuation.definition.attribute.begin.v
      push:
        - include: String
        - match: \b({{re_attrib}})\b
          scope: keyword.language.attribute.v
        - match: (:)
          scope: punctuation.colon.v
        - match: \]
          scope: punctuation.definition.attribute.end.v
          pop: true

    - include: Value

    - match: (^#!)
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.line.v
        - include: EOL

  AtToken:
    - match: '{{re_at_token}}'
      scope: variable.language.v

  Directive:
    - match: \#(flag)\b
      scope: keyword.control.import.include.v
      push:
        - include: Keyword_Comptime
        # TODO: highlight -W
        - match: '(-l)(\w+)'
          captures:
            1: constant.flag.include.v
            2: constant.included.lib.v
        - match: '(-I)?(-L)?({{re_at_token}})?(\S+)?'
          captures:
            1: constant.flag.include.v
            2: constant.flag.include_lib.v
            3: variable.language.v
            4: constant.included.path.v
        - include: EOL
    - match: \#(include)\b
      scope: keyword.control.import.include.v
      push:
        - match: '<|\"'
          scope: punctuation.definition.string.begin.v
          push:
            - meta_scope: string.quoted.other.v
            - match: '>|\"'
              scope: punctuation.definition.string.end.v
              pop: true
        - include: EOL
    - include: EOL

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - match: \b({{re_name_regular}})\b
          scope: entity.name.namespace.v
        - include: EOL

  Import:
    - match: \b(import)\b
      scope: keyword.control.import.v
      push:
        - include: Punctuation
        - match: \b(as)\b
          scope: keyword.other.alias.v
        - match: \b({{re_name_regular}})\b
          scope: entity.name.module.v
        - match: \{
          scope: punctuation.definition.import-list.begin.v
          push:
            - include: Punctuation
            - match: \b({{re_type_class}})\b
              scope: constant.v
            - match: \b({{re_name_regular}})\b
              scope: constant.v
            - match: \}
              scope: punctuation.definition.import-list.end.v
              pop: true
        - include: EOL

  # Entity

  Enum:
    - match: \b(enum)\b
      scope: keyword.declaration.enum.v
      push:
        - match: \b({{re_type_class}})\b
          scope: entity.name.class.v
        - match: \b(\S+)\b
          scope: invalid.illegal.v
        - match: \{
          scope: punctuation.definition.block.begin.v
          push:
            - match: \=
              scope: keyword.operator.assignment.v
            - match: \b{{re_name_regular}}\b
              scope: constant.enum.v
            - include: Comment
            - include: Number
            - match: \b(\S+)\b
              scope: invalid.illegal.v
            - match: \}
              scope: punctuation.definition.block.end.v
              pop: true
        - include: EOL

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - match: \b(C)\b
          scope: constant.c-interop.v
        - match: \.
          scope: punctuation.accessor.v
        - match: \b({{re_type_class}})\b
          scope: entity.name.class.v
        - include: Block
        - include: EOL

  Function:
    - match: \b(fn)\b
      scope: keyword.declaration.function.v
      push:
        - include: Type
        - match: \.
          scope: punctuation.accessor.v
        - include: ParameterListBegin
        - match: \b({{re_name_regular}})\b
          scope: entity.name.function.v
        - include: Block
        - include: EOL

  FnCall:
    - match: '\b(?:({{re_type_numeric}})|({{re_type_primitive}}))(\()'
      captures:
        1: storage.type.numeric.v
        2: storage.type.primitive.v
        3: punctuation.definition.params.begin.v
      push: ParameterListEnd

    - match: '\b({{re_builtin}})(\()'
      captures:
        1: support.function.builtin.v
        2: punctuation.definition.params.begin.v
      push: ParameterListEnd

    - match: '(_(?:un)?likely_)(\()'
      captures:
        1: support.function.hint.v
        2: punctuation.definition.params.begin.v
      push: ParameterListEnd

    - match: '\s(\.)({{re_name_regular}})(\()'
      captures:
        1: punctuation.accessor.v
        2: variable.function.v
        3: punctuation.definition.params.begin.v
      push: ParameterListEnd

    - match: '\b({{re_name_regular}})(\()'
      captures:
        1: variable.function.v
        2: punctuation.definition.params.begin.v
      push: ParameterListEnd

  # Generic

  Block:
    - match: \{
      scope: punctuation.definition.block.begin.v
      push:
        - include: Value
        - match: \}
          scope: punctuation.definition.block.end.v
          pop: true

  Type:
    - include: TypeModifier
    - match: \b({{re_type_numeric}})\b
      scope: storage.type.numeric.v
    - match: \b({{re_type_primitive}})\b
      scope: storage.type.primitive.v
    - match: \b(map)\b
      scope: storage.type.map.v
    - match: \b(C)\b
      scope: constant.c-interop.v
    - match: \b([A-Z])\b
      scope: storage.type.generic.v
    - match: (<)([A-Z])(>)
      captures:
        1: punctuation.definition.generic.begin.v
        2: storage.type.generic.v
        3: punctuation.definition.generic.end.v
    - match: \b({{re_type_class}})\b
      scope: storage.type.class.v

  ParameterListBegin:
    - match: \(
      scope: punctuation.definition.params.begin.v
      push: ParameterListEnd

  ParameterListEnd:
    - match: \b(fn)\b
      scope: storage.type.function.v
    - match: \.\.\.
      scope: keyword.operator.varargs.v
    - match: \.({{re_name_regular}})
      scope: constant.enum.v
    - include: Value
    - match: \)
      scope: punctuation.definition.params.end.v
      pop: true

  Value:
    - include: AtToken
    - include: Block
    - include: Comment
    - include: ComptimeKeyword
    - include: Number
    - include: String
    - include: FnCall
    - include: Keyword
    - include: Type
    - include: Operator
    - include: Punctuation
    - include: ParameterListBegin
    - match: \s\.({{re_name_regular}})\b
      scope: constant.enum.v
    - match: \b({{re_name_regular}})\b
      scope: variable.other.v

  # Language

  Keyword:
    - match: \b(in)\b
      scope: keyword.operator.access.v
    - match: \b(is)\b
      scope: keyword.operator.comparison.v

    - match: \b(const)\b
      scope: keyword.declaration.constant.v

    - match: \b(assert)\b
      scope: keyword.language.assert.v
    - match: \b(interface)\b
      scope: keyword.declaration.interface.v
    - match: \b(type)\b
      scope: keyword.declaration.type_alias.v
    - match: \b(or)\b
      scope: keyword.language.or.v
    - match: \b(unsafe)\b
      scope: keyword.language.unsafe.v
    - match: \b(asm|atomic|embed|go(to)?|r?lock|shared|sizeof|static|typeof|union)\b
      scope: keyword.language.v

      # Constants
    - match: \b(err|it|none)\b
      scope: constant.language.v
    - match: \b(true|false)\b
      scope: constant.language.boolean.v

      # Control
    - match: \$(if|else|for)\b
      scope: keyword.control.flow.comptime.v
    - match: \b(if|else|for|match|select|return|break|continue|defer)\b
      scope: keyword.control.flow.v

      # Modifiers
    - match: \b(mut)\b
      scope: storage.modifier.mutable.v
    - match: \b(pub)\b
      scope: storage.modifier.public.v

      # Language
    - match: \b(__[a-z_]+)\b
      scope: support.v

  Keyword_Comptime:
    - match: \b{{re_os}}\b
      scope: support.os.v
    - match: \b{{re_compiler}}\b
      scope: support.compiler.v
    - match: \b{{re_platform}}\b
      scope: support.platform.v
    - match: \b{{re_other}}\b
      scope: support.other.v

  Operator:
    - match: (\+\+)
      scope: keyword.operator.increment.v
    - match: (--)
      scope: keyword.operator.decrement.v
    - match: ([=!<>]=)|<|>
      scope: keyword.operator.comparison.v
    - match: ([+*/%:&\|^-]|<<|>>)?=|(:)
      scope: keyword.operator.assignment.v
    - match: ([+*/%-])
      scope: keyword.operator.arithmetic.v
    - match: (!=?|\|\||&&)
      scope: keyword.operator.logical.v
    - match: ([&\|^~])
      scope: keyword.operator.bitwise.v
    - match: (<<|>>)
      scope: keyword.operator.shift.v
    - match: (\.\.\.?)
      scope: keyword.operator.range.v
    - match: (<-)
      scope: keyword.operator.arrow.v

  Punctuation:
    - match: \.
      scope: punctuation.accessor.v
    - match: (,|;)
      scope: punctuation.separator.v
    - match: (\[|\])
      scope: punctuation.brackets.v

  TypeModifier:
    - match: (\[\])+
      scope: storage.modifier.array.v
    - match: \&\&
      scope: keyword.operator.logical.v
    - match: \&
      scope: storage.modifier.reference.v
    - match: \?
      scope: storage.modifier.optional.v
    - match: (\*)({{re_name_regular}})
      captures:
        1: storage.modifier.dereference.v
        2: variable.other.v
    - match: (\*)(\()
      captures:
        1: storage.modifier.dereference.v
        2: punctuation.definition.params.begin.v
      push: ParameterListEnd

  # Common

  Comment:
    - include: CommentBlock
    - include: CommentLine

  CommentBlock:
    - match: /\*
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: CommentTag
        - include: CommentBlock
        - include: CommentLine
        - match: \*/
          scope: punctuation.definition.comment.end.v
          pop: true

  CommentLine:
    - match: //
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.line.v
        - include: CommentTag
        - include: CommentBlock
        - include: EOL

  CommentTag:
    - match: '\b(TODO|todo):\s.*$'
      scope: comment.tag.todo.v
    - match: '\b(FIXME|fixme):\s.*$'
      scope: comment.tag.fixme.v
    - match: '\b(ht|f)tps?://(www.)?[A-Za-z]\S+'
      scope: comment.tag.url.v

  String:
    - include: StringDouble
    - include: StringSingle
    - include: Rune

  StringDouble:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: StringIncludes
      - match: \"
        scope: punctuation.definition.string.end.v
        pop: true

  StringSingle:
    - match: \'
      scope: punctuation.definition.string.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: StringIncludes
      - match: \'
        scope: punctuation.definition.string.end.v
        pop: true

  StringIncludes:
    - include: StringInterpolation
    - include: StringEscaped

  StringInterpolation:
    - match: \$\{
      scope: punctuation.definition.template.begin.v
      push:
        - include: Value
        - match: \}
          scope: punctuation.definition.template.end.v
          pop: true
    - match: (\$)(err|it)\b
      captures:
        1: punctuation.definition.template.v
        2: constant.language.v
    - match: (\$)(?:({{re_name_regular}})(\.))?({{re_name_regular}})(\()
      captures:
        1: punctuation.definition.template.v
        2: variable.other.v
        3: punctuation.accessor.v
        4: variable.function.v
        5: punctuation.definition.params.v
      push: ParameterListEnd
    - match: (\$)(?:({{re_name_regular}})(\.))?({{re_name_regular}})
      captures:
        1: punctuation.definition.template.v
        2: variable.other.v
        3: punctuation.accessor.v
        4: variable.other.v

  StringEscaped:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v

  Rune:
    - match: '`'
      scope: punctuation.definition.rune.begin.v
      push:
      - meta_scope: constant.rune.v
      - match: '`'
        scope: punctuation.definition.rune.end.v
        pop: true

  Number:
    - match: \b([\d_]+(\.[\d_]+)?e[\+\-]?\d+)\b
      scope: constant.numeric.scientific.v
    - match: \b(0b[01_]+)\b
      scope: constant.numeric.binary.v
    - match: \b(0o[0-7_]+)\b
      scope: constant.numeric.octal.v
    - match: \b(0x[\h_]+)\b
      scope: constant.numeric.hexadecimal.v
    - match: \b([\d_]+\.[\d_]+)(\.\d+)*\b
      captures:
        1: constant.numeric.decimal.v
        2: invalid.illegal.v
    - match: \b([\d_]+)\b
      scope: constant.numeric.v

  EOL:
    - match: $
      pop: true
