%YAML 1.2
---
name: V
scope: source.v
file_extensions: [v, vsh]
foldingStartMarker: '[\{\(]$'
foldingStopMarker: '^\s*[\)\}]$'
first_line_match: ^#!\S*/\bv\b

variables:
  re_question: \bQ:\s.*\?
  re_todo: \b[a-zA-Z]+:\s.*$
  re_url: \b(ht|f)tps?://(www.)?[A-Za-z]\S+

  re__escaped: \\([\\tvnrbfae''"]|x\h{2}|\d{,3})
  re__number: (?:(0b[01_]+)|(0o[0-7_]+)|(0x[\h_]+)|([\d_]+\.[\d_]+)|([\d_]+))

  re_name_regular: \b([a-z_][a-z_\d]*)\b

  re_builtin: \b(exit|error|panic|e?print(?:ln)?|print_backtrace?)\b
  re_type_numeric: (any_(?:int|float)|byte|u16|u32|u64|u128|int|i16|i64|i128|i8|f32|f64)
  re_type_primitive: (any|bool|chan|rune|string|size_t|(?:byte|char|void)ptr)
  re_type_class: ([A-Z][A-Za-z\d_]*)

contexts:
  main:
    - include: Import
    - include: Module
    - include: Attributes
    - include: Const
    - include: Struct

    - include: Value
    - include: Block

  Attributes:
    - match: \[\S+\]
      scope: keyword.language.attribute.v

  Block:
    - match: \{
      scope: punctuation.definition.block.begin.v
      push:
        - include: Value
        - include: Block
        - match: \}
          scope: punctuation.definition.block.end.v
          pop: true

  Builtins:
    - match: (?:{{re_builtin}}|{{re_name_regular}})\s*(\()
      captures:
        1: support.function.builtin.v
        2: entity.name.function.v
        3: punctuation.definition.params.begin.v
      push:
        - include: Value
        - match: \)
          scope: punctuation.definition.params.end.v
          pop: true
    - match: \b(it|this|self)\b
      scope: variable.language.v

  Comment:
    - include: CommentBlock
    - include: CommentLine

  CommentBlock:
    - match: /\*
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: CommentTags
        - include: CommentBlock
        - include: CommentLine
        - match: \*/
          scope: punctuation.definition.comment.end.v
          pop: true

  CommentLine:
    - match: //
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.line.v
        - include: CommentTags
        - include: CommentBlock
        - include: EOL

  CommentTags:
    - match: '{{re_question}}'
      scope: comment.tag.question.v
    - match: '{{re_todo}}'
      scope: comment.tag.todo.v
    - match: '{{re_url}}'
      scope: comment.tag.url.v

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - include: Params
        - include: EOL

  Generics:
    - match: (<){{re_type_class}}(>)
      captures:
        1: punctuation.definition.generic.begin.v
        2: storage.type.generic.v
        3: punctuation.definition.generic.end.v

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - match: \b(as)\b
          scope: keyword.other.alias.v
        - match: '{{re_name_regular}}'
          scope: entity.name.module.v
        - include: EOL

  Keywords:
    - match: \b(assert)\b
      scope: keyword.language.assert.v
    - match: \b(enum)\b
      scope: storage.type.enum.v
    - match: \b(fn)\b
      scope: keyword.declaration.function.v
    - match: \b(interface)\b
      scope: keyword.declaration.interface.v
    - match: \b(type)\b
      scope: keyword.declaration.type_alias.v
    - match: \b(unsafe)\b
      scope: keyword.language.unsafe.v
    - match: \b(asm|atomic|embed|go(to)?|lock|none|or|rlock|select|shared|sizeof|static|typeof|union|unsafe)\b
      scope: keyword.language.v

  Modifiers:
    - match: \b(mut)\b
      scope: storage.modifier.mutable.v
    - match: \b(pub)\b
      scope: storage.modifier.public.v
    - match: \b(__global)\b
      scope: storage.modifier.global.v

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - match: '{{re_name_regular}}'
          scope: entity.name.namespace.v
        - include: EOL

  Numbers:
    - match: '{{re__number}}(\.\d+)*'
      captures:
        1: constant.numeric.binary.v
        2: constant.numeric.octal.v
        3: constant.numeric.hexadecimal.v
        4: constant.numeric.decimal.v
        5: constant.numeric.v
        6: invalid.illegal.v

  Operator:
    - match: \b(in)\b
      scope: keyword.operator.access.v
    - match: \|
      scope: keyword.operator.sumtype.v
    - match: \|\|
      scope: keyword.operator.or.v
    - match: \&\&
      scope: keyword.operator.and.v
    - match: \.\.
      scope: keyword.operator.range.v
    - match: <-
      scope: keyword.operator.arrow.v
    - match: \!
      scope: keyword.operator.not.v
    - match: <<
      scope: keyword.operator.append.v
    - match: \:=?
      scope: keyword.operator.assignment.v
    - match: ([<>=!]=)|<|>|\b(is)\b
      scope: keyword.operator.comparison.v
    - match: \=
      scope: keyword.operator.assignment.v
    - match: '[\*\+%/-]'
      scope: keyword.operator.arithmetic.v

  Params:
    - match: \(
      scope: punctuation.definition.params.begin.v
      push:
        - include: Value
        - match: \)
          scope: punctuation.definition.params.end.v
          pop: true

  String:
    - include: StringQDouble
    - include: StringQSingle
    - include: StringLiteral

  StringQDouble:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: StringEscaped
      - match: \"
        scope: punctuation.string.double.end.v
        pop: true

  StringQSingle:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: StringEscaped
      - match: \'
        scope: punctuation.string.single.end.v
        pop: true

  StringLiteral:
    - match: '`'
      scope: punctuation.string.literal.begin.v
      push:
      - meta_scope: constant.character.v
      - match: '`'
        scope: punctuation.string.literal.end.v
        pop: true

  StringEscaped:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - include: Types
          set: Block
          with_prototype:
            - include: Attributes
        - include: EOL

  Types:
    - include: TypeModifier
    - match: \b{{re_type_numeric}}\b
      scope: storage.type.numeric.v
    - match: \b{{re_type_primitive}}\b
      scope: storage.type.primitive.v
    - match: \b(map)\b
      scope: storage.type.map.v
    - match: \b{{re_type_class}}\b
      scope: storage.type.other.v
    - include: Generics

  TypeModifier:
    - match: (\[])+
      scope: storage.modifier.array.v
    - match: \&
      scope: storage.modifier.in-heap.v
    - match: \?
      scope: storage.modifier.optional.v
    - match: \*+
      scope: storage.modifier.pointer.v

  Value:
    - include: Comment
    - include: String
    - include: Keywords
    - include: Params
    - include: Builtins
    - match: \b(true|false)\b
      scope: constant.language.boolean.v
    - match: \b(if|else|for|match|select|return|break|continue|defer)\b
      scope: keyword.control.flow.v
    - include: Numbers
    - include: Modifiers
    # - match: TODO
    #   scope: invalid.illegal.v
    - match: \b([A-Z]+)\b
      scope: constant.other.v
    - include: Types
    - include: Operator
    - match: '{{re_name_regular}}'
      scope: variable.other.v

  EOL:
    - match: $
      pop: true
