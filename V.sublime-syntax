%YAML 1.2
---
name: V
scope: source.v
file_extensions: [v, vsh]
foldingStartMarker: '[\{\(]$'
foldingStopMarker: '^\s*[\)\}]$'
first_line_match: ^#!\S*/\bv\b

variables:
  re__escaped: \\([\\tvnrbfae''"]|x\h{2}|\d{,3})
  re__number: (?:(0b[01_]+)|(0o[0-7_]+)|(0x[\h_]+)|([\d_]+\.[\d_]+)|([\d_]+))


  re_builtin: (exit|error|panic|e?print(?:ln)?|print_backtrace?)
  re_type_numeric: (any_(?:int|float)|byte|u16|u32|u64|u128|int|i16|i64|i128|i8|f32|f64)
  re_type_primitive: (any|bool|chan|rune|string|size_t|(?:byte|char|void)ptr)
  re_name_regular: ([a-z][a-z\d_]*)
  re_type_class: ([A-Z][A-Za-z\d_]*)

contexts:
  main:
    - include: Module
    - include: Import
    - include: Include
    - include: Attributes
    - include: Const
    - include: Struct

    - include: Value
    - include: Block

  Attributes:
    - match: ^\[.+\]$
      scope: keyword.language.attribute.v

  Block:
    - match: \{
      scope: punctuation.definition.block.begin.v
      push:
        - include: Value
        - include: Block
        - match: \}
          scope: punctuation.definition.block.end.v
          pop: true

  Comment:
    - include: CommentBlock
    - include: CommentLine

  CommentBlock:
    - match: /\*
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: CommentTags
        - include: CommentBlock
        - include: CommentLine
        - match: \*/
          scope: punctuation.definition.comment.end.v
          pop: true

  CommentLine:
    - match: //
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.line.v
        - include: CommentTags
        - include: CommentBlock
        - include: EOL

  CommentTags:
    - match: '\b[a-zA-Z]+:\s.*$'
      scope: comment.tag.todo.v
    - match: '\b(ht|f)tps?://(www.)?[A-Za-z]\S+'
      scope: comment.tag.url.v

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - include: Params
        - include: EOL

  FunctionCall:
    - match: (?:{{re_builtin}}|{{re_name_regular}})\s*(\()
      captures:
        1: support.function.builtin.v
        2: entity.name.function.v
        3: punctuation.definition.params.begin.v
      push:
        - include: Value
        - match: \)
          scope: punctuation.definition.params.end.v
          pop: true

  Generics:
    - match: (<){{re_type_class}}(>)
      captures:
        1: punctuation.definition.generic.begin.v
        2: storage.type.generic.v
        3: punctuation.definition.generic.end.v

  Import:
    - match: \b(import)\b
      scope: keyword.control.import.v
      push:
        - match: \b(as)\b
          scope: keyword.other.alias.v
        - match: \b{{re_name_regular}}\b
          scope: entity.name.module.v
        - match: \{
          scope: punctuation.definition.import-list.begin.v
          push:
            - include: Punctuation
            - match: \b{{re_type_class}}\b
              scope: storage.type.other.v
            - match: \b{{re_name_regular}}\b
              scope: entity.name.function.v
            - match: \}
              scope: punctuation.definition.import-list.end.v
              pop: true
        - include: EOL

  Include:
    - match: '#include'
      scope: keyword.control.import.include.v
      set:
        - match: '<'
          scope: punctuation.definition.string.begin.v
          push:
            - meta_scope: string.quoted.other.v
            - match: '>'
              scope: punctuation.definition.string.end.v
              pop: true
        - include: EOL

  Keywords:
    - match: \b(assert)\b
      scope: keyword.language.assert.v
    - match: \b(fn)\b
      scope: keyword.declaration.function.v
    - match: \b(interface)\b
      scope: keyword.declaration.interface.v
    - match: \b(type)\b
      scope: keyword.declaration.type_alias.v
    - match: \b(unsafe)\b
      scope: keyword.language.unsafe.v
    - match: \b(or)\b
      scope: keyword.language.or.v
    - match: \b(asm|atomic|embed|go(to)?|r?lock|none|shared|sizeof|static|typeof|union|unsafe)\b

      # Builtin
      scope: keyword.language.v
    - match: \b{{re_builtin}}\b
      scope: support.function.builtin.v
    - match: \b(it|this|self)\b
      scope: variable.language.v

      # Constants
    - match: \b(err)\b
      scope: constant.language.error.v
    - match: \b(true|false)\b
      scope: constant.language.boolean.v

      # Control
    - match: \$(if|else|for)\b
      scope: keyword.control.flow.compile-time.v
    - match: \b(if|else|for|match|select|return|break|continue|defer)\b
      scope: keyword.control.flow.v

      # Modifiers
    - match: \b(mut)\b
      scope: storage.modifier.mutable.v
    - match: \b(pub)\b
      scope: storage.modifier.public.v

      # Hints
    - match: '_(un)?likely_'
      scope: support.function.hint.v

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - match: \b{{re_name_regular}}\b
          scope: entity.name.namespace.v
        - include: EOL

  Numbers:
    - match: '{{re__number}}(\.\d+)*'
      captures:
        1: constant.numeric.binary.v
        2: constant.numeric.octal.v
        3: constant.numeric.hexadecimal.v
        4: constant.numeric.decimal.v
        5: constant.numeric.v
        6: invalid.illegal.v

  Operator:
    - match: \b(in)\b
      scope: keyword.operator.access.v
    - match: \+\+
      scope: keyword.operator.increment.v
    - match: '--'
      scope: keyword.operator.decrement.v
    - match: ([\|&^+*/%-]=|(<<|>>)=)
      scope: keyword.operator.assignment.v
    - match: '[+*/%-]'
      scope: keyword.operator.arithmetic.v
    - match: '[~&^|]'
      scope: keyword.operator.bitwise.v
    - match: '(!=?|&&|\|\|)'
      scope: keyword.operator.logical.v
    - match: (<<|>>)
      scope: keyword.operator.shift.v
    - match: \.\.
      scope: keyword.operator.range.v
    - match: <-
      scope: keyword.operator.arrow.v
    - match: ([<>=]=)|<|>|\b(is)\b
      scope: keyword.operator.comparison.v
    - match: (:|:=|=)
      scope: keyword.operator.assignment.v

  Params:
    - match: \(
      scope: punctuation.definition.params.begin.v
      push:
        - include: Value
        - match: \)
          scope: punctuation.definition.params.end.v
          pop: true

  Punctuation:
    - match: '\.'
      scope: punctuation.accessor.v
    - match: ','
      scope: punctuation.separator.v
    - match: '[\[\]]'
      scope: punctuation.section.brackets.v

  Rune:
    - match: '`'
      scope: punctuation.definition.rune.begin.v
      push:
      - meta_scope: constant.rune.v
      - match: '`'
        scope: punctuation.definition.rune.end.v
        pop: true

  String:
    - include: StringDouble
    - include: StringSingle
    - include: Rune

  StringDouble:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: StringInterpolation
      - include: StringEscaped
      - match: \"
        scope: punctuation.definition.string.end.v
        pop: true

  StringSingle:
    - match: \'
      scope: punctuation.definition.string.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: StringInterpolation
      - include: StringEscaped
      - match: \'
        scope: punctuation.definition.string.end.v
        pop: true

  StringInterpolation:
    - match: \$\{
      scope: punctuation.definition.template.begin.v
      push:
        # TODO: Use a smaller subset of `Value`.
        - include: Value
        - match: \}
          scope: punctuation.definition.template.end.v
          pop: true
    - match: (\$){{re_name_regular}}(\(\))
      captures:
        1: punctuation.definition.template.v
        2: entity.name.function.v
        3: punctuation.definition.params.v
    - match: (\$){{re_name_regular}}
      captures:
        1: punctuation.definition.template.v
        2: variable.other.v

  StringEscaped:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
          # StructType
        - match: \b([A-Z]+)\b
          scope: invalid.illegal.v
        - match: \b{{re_type_class}}\b
          scope: entity.name.struct.v
        - match: \b(\S+)\b
          scope: invalid.illegal.v
        - include: Block
        - include: EOL

  Types:
    - include: TypeModifier
    - match: \b{{re_type_numeric}}\b
      scope: storage.type.numeric.v
    - match: \b{{re_type_primitive}}\b
      scope: storage.type.primitive.v
    - match: \b(enum)\b
      scope: storage.type.enum.v
    - match: \b(map)\b
      scope: storage.type.map.v
    - match: \b(C)\b
      scope: constant.language.v
    - match: \b([A-Z]+)\b
      scope: invalid.illegal.v
    - match: \b{{re_type_class}}\b
      scope: storage.type.other.v
    - include: Generics

  TypeModifier:
    - match: (\[])+
      scope: storage.modifier.array.v
    - match: \&
      scope: storage.modifier.reference.v
    - match: \?
      scope: storage.modifier.optional.v
    - match: \*+
      scope: storage.modifier.pointer.v

  Value:
    - include: Comment
    - include: String
    - include: Types
    - include: Keywords
    - include: Hints
    - include: Numbers
    - include: Params
    - include: Operator
    - include: Punctuation
    - include: FunctionCall
    - match: \b{{re_name_regular}}\b
      scope: variable.other.v

  EOL:
    - match: $
      pop: true
