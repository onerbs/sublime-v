%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vv
  - vsh
first_line_match: ^(\bModule\b|#!\S*/v)
foldingStartMarker: '^.*[{\[\(]$'
foldingStopMarker: '^[)]}]$'

variables:
  re__escaped: '\\([\\tvnrbfae''"]|x\h{2}|\d{,3})'

  re_name_regular: \b([a-z][a-z\d_]*)\b
  re_name_package: '(?:{{re_name_regular}}\.)*{{re_name_regular}}'

contexts:
  main:
    - include: Const
    - include: Import
    - include: Module

    - include: Comments
    - include: Strings


  # KEYWORDS

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - meta_scope: meta.const
        - match: \(
          scope: punctuation.const.body.begin.v
          push:
            - meta_scope: meta.const.body
            # todo: assignment.
            - match: \)
              scope: punctuation.const.body.end.v
              pop: true
        - match: $
          pop: true

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - meta_scope: meta.import
        - match: '{{re_name_package}}'
          scope: entity.name.namespace.v
          push:
            - match: \b(as)\b
              scope: keyword.other.alias.v
              push:
                - meta_scope: meta.import.alias
                - match: '{{re_name_regular}}'
                  scope: entity.name.namespace.alias.v
                - match: $
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - meta_scope: meta.module
        - match: '{{re_name_package}}'
          scope: entity.name.namespace
        - match: $
          pop: true


  # GRAMMAR

  Comments:
    - include: comment_block
    - include: comment_line

  comment_block:
    - match: /\*
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: comment_block
        - include: comment_line
        - match: \*/
          scope: punctuation.comment.end.v
          pop: true

  comment_line:
    - match: //
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.line.double-slash.v
        - include: comment_block
        - match: $
          pop: true


  Strings:
    - include: quoted_double
    - include: quoted_single
    - include: literal_char

  quoted_double:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: escaped_char
      - match: \"
        scope: punctuation.string.double.end.v
        pop: true

  quoted_single:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: escaped_char
      - match: \'
        scope: punctuation.string.single.end.v
        pop: true

  literal_char:
    - match: \`
      scope: punctuation.string.literal.begin.v
      push:
      - match: \b\w\b
        scope: string.literal.v
      - match: \b\S+\b
        scope: invalid.illegal.v
      - match: \`
        scope: punctuation.string.literal.end.v
        pop: true

  escaped_char:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v
