%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vv
  - vsh
first_line_match: ^(\bModule\b|#!\S*/v)
foldingStartMarker: '^.*[{\[\(]$'
foldingStopMarker: '^[)]}]$'
variables:
  re_keywords: \b(enum|interface|go|goto|in|or|none|type)\b

  re_name_regular: ([a-z][a-z\d_]*)
  re_name_type: ([A-Z][a-zA-Z]*)

  re_type_primitive: (bool|string|rune|byteptr|voidptr)
  # re_type_numeric: (byte|u(?:16|32|64|128)|i(?:nt|8|16|64|128)|f(?:32|64))
  re_type_numeric: (byte|u16|u32|u64|u128|int|i8|i16|i64|i128|f32|f64)

  re_type_list: \b(?:{{re_type_primitive}}|{{re_type_numeric}}|{{re_name_type}}|([a-z][a-zA-Z0-9_]*))\b

  re_number: -?\d+(?:\.\d+)*
  re_escaped: \\(?:[tvnrbfae]|\d{3}|x\h{7}|x\h{2})

  re_comma: \s?,\s?
  re_pair: (\w+)\s+(\w+)
  re_const_list: (\b[A-Z]+\b)(?:(?:{{re_comma}})(\b[A-Z]+\b))*

  re_param_typed: (\b\w\b+)\s.+{{re_type_list}}
  re_param_list: (\b\w\b+)(?:(?:{{re_comma}})(\b\w+\b))*
  re_param_list_typed: '{{re_param_list}}\s+{{re_type_list}}'
  re_param_multi: '{{re_param_list_typed}}(?:{{re_comma}}{{re_param_list_typed}})'

contexts:
  main:
    - include: __comments
    - include: __quotes

    - include: __const
    - include: __flow
    - include: __function
    - include: __import
    - include: __module
    - include: __struct

    - match: \b{{re_keywords}}\b
      scope: keyword.v


  __comments:
    - match: //
      scope: punctuation.definition.comment.v
      push:
        - meta_scope: comment.line.double-slash.v
        - match: $
          pop: true

    - match: /\*
      scope: punctuation.definition.comment.v
      push:
        - meta_scope: comment.block.v
        - match: /\*
          push: comment_block_nested
        - match: \*/
          pop: true

  comment_block_nested:
    - meta_scope: comment.block.nested.v
    - match: /\*
      push: comment_block_nested
    - match: \*/
      pop: true


  __constants:
    - match: '{{re_number}}'
      scope: constant.numeric.v
    - match: \b(true|false)\b
      scope: constant.language.v


  __quotes:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push: double_quoted_string
    - match: \'
      scope: punctuation.definition.string.begin.v
      push: single_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.v
    - include: escaped_char
    - match: \"
      scope: punctuation.definition.string.end.v
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.v
    - include: escaped_char
    - match: \'
      scope: punctuation.definition.string.end.v
      pop: true

  escaped_char:
    - match: '{{re_escaped}}'
      scope: constant.character.escape.v



  # STATEMENTS

  # __flow:
  #   - include: __flow_if
  #   - include: __flow_for

  # __flow_if:
  #   - match: \bif\b
  #     scope: keyword.control.if.v
  #     set:
  #       - meta_scope: flow.if
  #       - match: \{
  #         push:
  #           - meta_scope: flow.if.body
  #           - include: __flow
  #           - include: __return
  #           - match: \}
  #             set:
  #               - match: \belse\b
  #                 scope: keyword.control.else.v
  #                 push:
  #                   - meta_scope: else
  #                   -
  #               - match: \}
  #                 pop: true
  #       - match: $
  #         pop: true
  #   - match: $
  #     pop: true

  # __flow_for:
  #   - match: \bfor\b
  #     scope: keyword.control.for.v
  #     set:
  #       - meta_scope: flow.for
  #       - match: \{
  #         push:
  #           - meta_scope: flow.for.body
  #           - match: \}
  #             pop: true
  #   - match: $
  #     pop: true

  colon_assign:
    - match: '{{re_const_list}}'
      scope: constant.other.v
      push:
        - match: ':'
          scope: keyword.operator.assign.v
          push: __assign_const
        - match: $
          pop: true
    - match: '{{re_param_list}}'
      scope: variable.parameter.v
      push:
        - match: ':'
          scope: keyword.operator.assign.v
          push: __assign_other
        - match: $
          pop: true

  short_assign:
    - match: '{{re_const_list}}'
      scope: constant.other.v
      push:
        - match: '='
          scope: keyword.operator.assign.v
          push: __assign_const
        - match: $
          pop: true
    - match: '{{re_param_list}}'
      scope: variable.parameter.v
      push:
        - match: '='
          scope: keyword.operator.assign.v
          push: __assign_other
        - match: $
          pop: true
  __function:
    - match: (\bpub\b\s+)?(\bfn\b)
      captures:
        1: storage.modifier.v
        2: keyword.declaration.function.v
      set:
        - meta_scope: function
        - match: \(
          scope: punctuation.function.target.begin.v
          push:
            - meta_scope: function.target
            - include: infer_type_named
            - match: \)
              scope: punctuation.function.target.end.v
              pop: true
        - match: \b[a-z_]+\b
          scope: entity.name.function.v
          set:
            - match: \(
              scope: punctuation.function.params.begin.v
              push:
                - meta_scope: function.params
                - include: infer_type_multi
                - match: \)
                  scope: punctuation.function.params.end.v
                  pop: true
            - include: infer_type
            - match: \{
              scope: punctuation.function.body.begin.v
              push:
                - meta_scope: function.body
                - include: __comments
                # - include: __flow
                - include: __return
                - match: \}
                  scope: punctuation.function.body.end
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true
    - match: $
      pop: true

  __import:
    - match: \bimport\b
      scope: keyword.declaration.import.v
      set:
        - meta_scope: import
        - match: \w+
          scope: entity.name.namespace.v
          set:
            - match: \bas\b
              scope: keyword.other.alias.v
              set:
                - meta_scope: import.alias
                - match: '[a-z]+'
                  scope: entity.name.namespace.alias.v
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true

  __module:
    - match: \bmodule\b
      scope: keyword.declaration.namespace.v
      set:
        - meta_scope: module
        - match: \w+
          scope: entity.name.namespace.v
          pop: true
    - match: $
      pop: true

  __struct:
    - match: \bstruct\b
      scope: keyword.declaration.struct.v
      set:
        - meta_scope: struct
        - include: infer_type
        - match: \{
          scope: punctuation.struct.body.begin.v
          push:
            - meta_scope: struct.body
            - include: __comments
            - match: '((\bpub\b\s+)?\bmut\b|(\bmut\b\s+)?\bpub\b)'
              scope: storage.modifier.v
            - include: infer_type_named
            - match: \}
              scope: punctuation.struct.body.end.v
              pop: true
        - match: $
          pop: true
    - match: $
      pop: true



  # FLOW

  # - match: \b(if|else|for)\b
  #   scope: keyword.control.v

  # - match: \b(pub|mut|const|var)\b
  #   scope: storage.modifier.v

  # - match: \b(match|defer|break|continue)\b
  #   scope: keyword.control.flow.v


  # INNER

  __return:
    - match: return
      scope: keyword.control.return.v
      push:
        - meta_scope: return
        - match: '(?:{{re_name_regular}}\.)?{{re_name_regular}}\s*\('
          # some.fun(
          captures:
            1: entity.object.v
            2: entity.function.name.v
          push:
            # param list
            - include: __constants
            - match: '{{re_name_regular}}'
              scope: variable.parameter.v
            - match: \)
              pop: true
        - match: '(?:{{re_name_regular}}\.)+{{re_name_regular}}'
          # some.val
          captures:
            1: entity.object.v
            2: entity.object.property.v
        - match: '{{re_name_regular}}\s*\('
          # fun(
          captures:
            1: entity.object.v
            2: entity.function.name.v
          push:
            # param list
            - include: __constants
            - match: '{{re_name_regular}}'
              scope: variable.parameter.v
            - match: \)
              pop: true
        - include: __constants
        - match: '{{re_name_regular}}'
          # val
          scope: variable.other
        - include: infer_user_type
          push: __struct_new
        - match: $
          pop: true


  # UTILS

  infer_user_type:
    - match: '{{re_type_list}}'
      captures:
        1: invalid.type.v
        2: invalid.type.v
        3: entity.name.type.v
        4: storage.type.other.v

  infer_type:
    - match: '{{re_type_list}}'
      captures:
        1: storage.type.primitive.v
        2: storage.type.numeric.v
        3: entity.name.type.v
        4: storage.type.other.v

  infer_type_named:
    - match: '(\w+)\s+{{re_type_list}}'
      captures:
        1: variable.parameter.v
        2: storage.type.primitive.v
        3: storage.type.numeric.v
        4: entity.name.type.v
        5: storage.type.other.v

  infer_type_single:
    - match: '{{re_param_typed}}'
      captures:
        1: variable.parameter.v
        2: storage.type.primitive.v
        3: storage.type.numeric.v
        4: entity.name.type.v
        5: storage.type.other.v

  infer_type_multi:
    - match: (?:(\bmut\b)\s+)?{{re_param_list_typed}}
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: variable.parameter.v
        4: storage.type.primitive.v
        5: storage.type.numeric.v
        6: entity.name.type.v
        7: storage.type.other.v
        8: variable.parameter.v
        9: variable.parameter.v
        10: storage.type.primitive.v
        11: storage.type.numeric.v
        12: entity.name.type.v
        13: storage.type.other.v
