%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vsh
first_line_match: ^#!\S*/\bv\b
foldingStartMarker: '[\{\(]$'
foldingStopMarker: '^\s*[\)\}]$'

variables:
  re__escaped: \\([\\tvnrbfae''"]|x\h{2}|\d{,3})
  re__number: \b(\d+(?:\.\d+)*|0x\h+|0o[0-7]+)\b

  re_name_regular: \b(?:(this|self)|([a-z_][a-z_\d]*))\b
  re_name_package: '(?:{{re_name_regular}}\.)+{{re_name_regular}}'
  re_name_irregular: \b([A-Za-z][A-Za-z\d_]+)\b

  re_type_numeric: (byte|u16|u32|u64|u128|int|i16|i64|i128|i8|f32|f64)
  re_type_primitive: (bool|byteptr|rune|string|voidptr)
  re_type_class: ([A-Z][A-Za-z\d_]*)

  re_types: '\b(?:(is|or|true|false)|{{re_type_numeric}}|{{re_type_primitive}}|(map)|{{re_type_class}})\b'

contexts:
  main:
    - include: Const
    - include: Function
    - include: Import
    - include: Module
    - include: Struct
    - include: TypeAlias

    - match: \b(type)\b
      scope: keyword.declaration.type_alias.v

    - include: Comment
    - include: String
    - include: Value
    - include: Block
    - include: Flow

  Block:
    - match: \{
      scope: punctuation.definition.block.begin.v
      push:
        - include: Flow
        - include: Value
        - include: Block
        - match: '}'
          scope: punctuation.definition.block.end.v
          pop: true

  Comment:
    - include: CommentBlock
    - include: CommentLine

  CommentBlock:
    - match: /\*
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: CommentBlock
        - include: CommentLine
        - match: \*/
          scope: punctuation.definition.comment.end.v
          pop: true
  CommentLine:
    - match: //|#
      scope: punctuation.definition.comment.begin.v
      push:
        - meta_scope: comment.line.double-slash.v
        - include: CommentBlock
        - include: EOL

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - include: Params
        - include: EOL

  Function:
    - match: \b(pub)\b
      scope: storage.modifier.public.v
    - match: \b(fn)\b
      scope: keyword.declaration.function.v
      push:
        - include: Params
        - match: '{{re_name_regular}}'
          scope: entity.name.function.v
          push:
            - match: \?
              scope: storage.modifier.optional.v
            - include: Params
            - include: Type
            - match: '{{re_name_regular}}'
              scope: storage.type.other.v
            - include: Block
            - include: EOL
        - include: EOL

  FunctionCall:
    - match: '{{re_name_regular}}\s*(\()'
      captures:
        1: keyword.language.v
        2: entity.name.function.v
        3: punctuation.function.params.begin.v
      push: __params
    - match: '{{re_name_package}}\s*(\()'
      captures:
        1: keyword.language.v
        2: entity.name.object.v
        3: keyword.language.v
        4: entity.name.function.v
        5: punctuation.function.params.begin.v
      push: __params

  Flow:
    - include: FlowIf
    - include: FlowElse
    - include: FlowFor
    - include: FlowMatch

  FlowIf:
    - match: \b(if)\b
      scope: keyword.control.conditional.if.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true

  FlowElse:
    - match: \b(else)\b
      scope: keyword.control.conditional.else.v
      push:
        - include: FlowIf
        - include: Block
        - match: \s+|$
          pop: true

  FlowFor:
    - match: \b(for)\b
      scope: keyword.control.conditional.for.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true

  FlowMatch:
    - match: \b(match)\b
      scope: keyword.control.conditional.match.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - match: \b(as)\b
          scope: keyword.other.alias.v
        - match: '{{re_name_regular}}|{{re_name_package}}'
          scope: entity.name.module.v
        - include: EOL

  IrregularName:
    - match: '{{re_name_irregular}}'
      scope: invalid.illegal.v

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - match: '{{re_name_regular}}|{{re_name_package}}'
          scope: entity.name.namespace.v
        - include: EOL

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - include: Type
        - include: Block
        - include: EOL

  Type:
    - include: TypeModifier
    - match: '{{re_types}}'
      captures:
        1: keyword.language.v
        2: storage.type.numeric.v
        3: storage.type.primitive.v
        4: storage.type.map.v
        5: storage.type.other.v
  TypeModifier:
    - match: (\*)+
      scope: storage.modifier.pointer.v
    - match: (\[])+
      scope: storage.modifier.array.v
    - match: (&)?
      scope: storage.modifier.mutable.v

  Operator:
    - match: \b(in)\b
      scope: keyword.operator.access.v
    - match: \:=|\:|=
      scope: keyword.operator.assignment.v
    - match: <=|>=|<|>|==|!=
      scope: keyword.operator.comparison.v
    - match: \.\.
      scope: keyword.operator.range.v
    - match: ([\|<>=\*/&%\+\-\.]+)
      scope: keyword.operator.v

  Params:
    - match: \(
      scope: punctuation.definition.params.begin.v
      push: __params

  __params:
    - include: Value_min
    - include: IrregularName
    - include: Params
    - match: \)
      scope: punctuation.definition.params.end.v
      pop: true

  String:
    - include: StringQDouble
    - include: StringQSingle
    - include: StringLiteral

  StringQDouble:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: variable
      - include: StringEscaped
      - match: \"
        scope: punctuation.string.double.end.v
        pop: true

  StringQSingle:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: StringEscaped
      - match: \'
        scope: punctuation.string.single.end.v
        pop: true

  StringLiteral:
    - match: '`'
      scope: punctuation.string.literal.begin.v
      push:
      - meta_scope: constant.character.v
      - match: '`'
        scope: punctuation.string.literal.end.v
        pop: true

  StringEscaped:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v

  Value:
    - match: \b(return|break|continue|defer|in)\b
      scope: keyword.control.flow.v
    - include: Value_min
    - include: IrregularName
    - include: Operator
  Value_min:
    - include: Comment
    - include: String
    - match: \b(mut)\b
      scope: storage.modifier.mutable.v
    - match: \b(pub)\b
      scope: storage.modifier.public.v
    - match: \b(__global)\b
      scope: storage.modifier.global.v
    - match: '{{re__number}}'
      scope: constant.numeric.v
    - include: Type
    - match: \b([A-Z]+)\b
      scope: constant.other.v
    - include: FunctionCall
    # Variable
    - match: '{{re_name_regular}}'
      captures:
        1: keyword.language.v
        2: variable.other.v
    # Object
    - match: '{{re_name_package}}'
      captures:
        1: keyword.language.v
        2: entity.name.object.v
        3: keyword.language.v
        4: variable.other.v

  EOL:
    - match: $
      pop: true
