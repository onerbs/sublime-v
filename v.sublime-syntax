%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vv
  - vsh
first_line_match: ^(\bModule\b|#!\S*/v)
foldingStartMarker: '^.*[{\[\(]$'
foldingStopMarker: '^[)]}]$'

variables:
  re_op_access: \b(in)\b
  re_op_assign: (\:=|\:|=)
  re_op_compare: (<=|>=|<|>)
  re_op_other: (<<|>>|\*=|/=|&=|%=|+=|-=|\*|/|&|%|+|-)
  re_operator: '(?:{{re_op_access}}|{{re_op_assign}}|{{re_op_compare}}|{{re_op_other}})'

  re__escaped: '\\([\\tvnrbfae''"]|x\h{2}|\d{,3})'

  re_name_package: '(?:{{re_name_regular}}\.)*{{re_name_regular}}'
  re_name_regular: \b([a-z][a-z\d_]*)\b
  re_name_irregular: \b([A-Za-z][A-Za-z\d_]+)\b

  re_type_numeric: \b(byte|u(?:16|32|64|128)|i(?:nt|16|64|128|8)|f(?:32|64))\b
  re_type_primitive: \b(bool|byteptr|rune|string|voidptr)\b
  re_type_class: ([A-Z][A-Za-z\d_]*)

  re_types: '(?:{{re_type_numeric}}|{{re_type_primitive}}|\b(map)\b|{{re_type_class}})'

contexts:
  main:
    - include: Const
    - include: Import
    - include: Module
    - include: Struct

    - include: Comments
    - include: Strings


  # KEYWORDS

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - meta_scope: meta.const
        - match: \(
          scope: punctuation.const.body.begin.v
          push:
            - meta_scope: meta.const.body
            - include: Association
            - match: \)
              scope: punctuation.const.body.end.v
              pop: true
        - match: $
          pop: true

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - meta_scope: meta.import
        - match: '{{re_name_package}}'
          scope: entity.name.namespace.v
          push:
            - match: \b(as)\b
              scope: keyword.other.alias.v
              push:
                - meta_scope: meta.import.alias
                - match: '{{re_name_regular}}'
                  scope: entity.name.namespace.alias.v
                - match: $
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - meta_scope: meta.module
        - match: '{{re_name_package}}'
          scope: entity.name.namespace
        - match: $
          pop: true

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - meta_scope: meta.struct
        - include: infer_type
        - match: \{
          scope: punctuation.struct.body.begin.v
          push:
            - meta_scope: meta.struct.body
            - include: Comments
            - match: \b(pub|mut)\b
            - include: Association
            - match: \}
              scope: punctuation.struct.body.end.v
              pop: true
        - match: $
          pop: true


  # GRAMMAR

  Association:
    - include: Comments
    - include: Strings
    - match: \b([A-Z]+)\b
      scope: constant.other.v
      push:
        - meta_scope: meta.infer.constant
        - include: __infer_type_with_op
    - match: '{{re_types}}'
      scope: invalid.illegal.v
      push:
        - meta_scope: meta.infer.invalid
        - include: __infer_type_with_op
    - match: '{{re_name_regular}}'
      scope: constant.other.v
      push:
        - meta_scope: meta.infer.variable
        - include: __infer_type_with_op
    - match: '{{re_name_irregular}}'
      scope: invalid.illegal.v
      push:
        - meta_scope: meta.infer.variable.irregular
        - include: __infer_type_with_op


  Comments:
    - include: comment_block
    - include: comment_line

  comment_block:
    - match: /\*
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: comment_block
        - include: comment_line
        - match: \*/
          scope: punctuation.comment.end.v
          pop: true

  comment_line:
    - match: //
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.line.double-slash.v
        - include: comment_block
        - match: $
          pop: true


  Strings:
    - include: quoted_double
    - include: quoted_single
    - include: literal_char

  quoted_double:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: escaped_char
      - match: \"
        scope: punctuation.string.double.end.v
        pop: true

  quoted_single:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: escaped_char
      - match: \'
        scope: punctuation.string.single.end.v
        pop: true

  literal_char:
    - match: \`
      scope: punctuation.string.literal.begin.v
      push:
      - match: \b\w\b
        scope: string.literal.v
      - match: \b\S+\b
        scope: invalid.illegal.v
      - match: \`
        scope: punctuation.string.literal.end.v
        pop: true

  escaped_char:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v


  # INFER

  __infer_type_with_op:
    - include: Comments
    - include: Strings
    - match: '{{re_operator}}'
      captures:
        1: keyword.operator.access.v
        2: keyword.operator.assignment.v
        3: keyword.operator.comparation.v
        4: keyword.operator.v
    - include: __infer_type
    - match: $
      pop: true

  __infer_type:
    - match: '{{re_types}}'
      captures:
        1: storage.type.numeric.v
        2: storage.type.primitive.v
        3: storage.type.map.v
        4: entity.name.other.v

  __infer_type_plus:
    - match: '{{re_name_regular}}'
      scope: storage.type.other.v
    - match: '{{re_name_irregular}}'
      scope: invalid.illegal.v
