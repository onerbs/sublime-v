%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vsh
first_line_match: ^\b(Module|#!.*/v)\b
foldingStartMarker: \b(const \(|\[|{)\b$
foldingStopMarker: ^\s*(}|\]|\))$
variables:
  re_keywords: \b(enum|interface|go|goto|in|or|none|return)\b
  re_primitive: \b(bool|string|rune|byteptr|voidptr)\b
  re_numeric: \b(byte|i(?:8|16|nt|64|128)|u(?:16|32|64|128)|f(?:32|64))\b
  re_type: (?:{{re_primitive}}|{{re_numeric}}|(\w+))

  re_comma: \s?,\s?
  re_pair: (\w+)\s+(\w+)

  re_param_typed: (\w+)\s+{{re_type}}
  re_param_list: (\w+)(?:(?:{{re_comma}})(\w+))?
  re_param_list_typed: '{{re_param_list}}\s+{{re_type}}'
  re_param_multi: '{{re_param_list_typed}}(?:{{re_comma}}{{re_param_list_typed}})'

contexts:
  main:
    - include: __basics

    - match: \b(module)\b\s+(\w+)
      captures:
        1: keyword.declaration.namespace.v
        2: variable.other.namespace.v

    - match: import
      scope: keyword.control.import.v
      push: import__

    - match: \bstruct\b
      scope: keyword.declaration.struct.v
      push: struct__

    - match: \b(pub\s+)?(fn)\b
      captures:
        1: storage.modifier.v
        2: keyword.declaration.function.v
      push: fn__

    # - match: \b{{re_keywords}}\b
    #   scope: keyword.v

    # - match: \s*(\w+)\s+(\w+)$
    #   captures:
    #     1: variable.other.v
    #     2: storage.type.v

    # - match: type
    #   scope: keyword.control.type.v

    # - match: \b(pub|mut|const|var)\b
    #   scope: storage.modifier.v

    # - match: \b{{re_primitive}}\b
    #   scope: storage.type.primitive.v

    # - match: \b{{re_numeric}}\b
    #   scope: storage.type.numeric.v

    # - match: \b(if|else|for)\b
    #   scope: keyword.control.v

    # - match: \b(match|defer|break|continue)\b
    #   scope: keyword.control.flow.v

  __comments:
    - match: //
      scope: punctuation.definition.comment.v
      set:
        - meta_scope: comment.line.double-slash.v
        - match: $
          pop: true

    - match: /\*
      scope: punctuation.definition.comment.v
      set:
        - meta_scope: comment.block.v
        - match: /\*
          push: comment_block_nested
        - match: \*/
          pop: true

  comment_block_nested:
    - meta_scope: comment.block.nested.v
    - match: /\*
      push: comment_block_nested
    - match: \*/
      pop: true


  __constants:
    - match: \b(-)?[0-9]+(.[0-9]+)*\b
      scope: constant.numeric.v
    - match: \b(true|false|[A-Z]+)\b
      scope: constant.language.v


  __quotes:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push: double_quoted_string
    - match: \'
      scope: punctuation.definition.string.begin.v
      push: single_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.v
    - match: \\[a-z]
      scope: constant.character.escape.v
    - match: \"
      scope: punctuation.definition.string.end.v
      pop: true
  single_quoted_string:
    - meta_scope: string.quoted.single.v
    - match: \\[a-z]
      scope: constant.character.escape.v
    - match: \'
      scope: punctuation.definition.string.end.v
      pop: true


  __basics:
    - include: __comments
    - include: __constants
    - include: __quotes




  import__:
    - meta_scope: import
    - match: (\w+)(?:\s+\b(as)\b\s+(\w+))?
      captures:
        1: variable.other.namespace.v
        2: keyword.declaration.alias.v
        3: variable.other.namespace.alias.v
      pop: true
    - match: $
      pop: true

  struct__:
    - meta_scope: struct
    - match: (\w+)
      scope: entity.name.type.v
    - match: \{
      push: struct__body
    - match: $
      pop: true

  struct__body:
    - meta_scope: struct.body
    - include: __basics
    - include: infer_type_single
    - match: (pub|mut)
      scope: storage.modifier.v
    - match: \}
      pop: true

  fn__:
    - meta_scope: function
    - match: \(
      push:
        - meta_scope: function.target
        - include: infer_type_single
        - match: \)
          pop: true
    - match: \b[a-z_]+\b
      scope: entity.name.function.v
      push:
        - match: \(
          set:
            - meta_scope: function.params
            - include: infer_type_multi
            - match: \)
              pop: true
    - match: \w+
      scope: entity.name.type.v
      set:
        - meta_scope: function
        - match: \{
          set:
          - meta_scope: function.body
          - include: __basics
          - include: __return
          - match: \}
            pop: true

  __return:
    - match: return
      scope: keyword.return.v
      push:
        - meta_scope: return
        - match: \{
          push:
            - meta_scope: return.body
            - match: \}
              pop: true
        - match: $
          pop: true

  infer_type_single:
    - match: '(?:(mut)\s+)?{1}{{re_param_typed}}'
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: storage.type.primitive.v
        4: storage.type.numeric.v
        5: entity.name.type.v

  infer_type_multi:
    - match: (?:(mut)\s+)?{1}{{re_param_list_typed}}
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: variable.parameter.v
        4: storage.type.primitive.v
        5: storage.type.numeric.v
        6: entity.name.type.v
        7: variable.parameter.v
        8: variable.parameter.v
        9: storage.type.primitive.v
        10: storage.type.numeric.v
        11: entity.name.type.v
