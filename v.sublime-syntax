%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vv
  - vsh
first_line_match: ^(\bModule\b|#!\S*/v)
foldingStartMarker: '^.*[{\[\(]$'
foldingStopMarker: '^[)]}]$'

variables:
  re_op_access: \b(in)\b
  re_op_assign: (\:=|\:|=)
  re_op_compare: (<=|>=|<|>)
  re_operator: '(?:{{re_op_access}}|{{re_op_assign}}|{{re_op_compare}}|([\|<>=\*/&%\+\-\.]+))'

  re__escaped: \\([\\tvnrbfae''"]|x\h{2}|\d{,3})
  re__number: \b(\d+(?:\.\d+)*|0x\h{2})\b

  re_name_package: '(?:{{re_name_regular}}\.)+{{re_name_regular}}'
  re_name_regular: \b([a-z][a-z\d_]*)\b
  re_name_irregular: \b([A-Za-z][A-Za-z\d_]+)\b

  re_type_numeric: (byte|u(?:16|32|64|128)|i(?:nt|16|64|128|8)|f(?:32|64))
  re_type_primitive: (bool|byteptr|rune|string|voidptr)
  re_type_class: ([A-Z][A-Za-z\d_]*)

  re_types: '\b(?:(this|self)|{{re_type_numeric}}|{{re_type_primitive}}|(map)|{{re_type_class}})\b'

contexts:
  main:
    - include: Const
    - include: Function
    - include: Import
    - include: Module
    - include: Struct

    - include: Comments
    - include: Strings
    - include: Block
    - include: Flow

  # KEYWORDS

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - meta_scope: meta.const.v
        - include: Params
        - include: EOL

  Function:
    - match: \b(pub)\b
      scope: storage.modifier.v
    - match: \b(fn)\b
      scope: keyword.declaration.function.v
      push:
        - meta_scope: meta.function.v
        - include: Params
        - match: '{{re_name_regular}}'
          scope: entity.name.function.v
          push:
            - include: Params
            - include: __types_def
            - match: '{{re_name_regular}}'
              scope: storage.type.other.v
            - include: __irregular
            - include: Block
            - include: EOL
        - include: EOL

  FunctionCall:
    - match: '{{re_name_regular}}\s*(\()'
      captures:
        1: entity.name.function.v
        2: punctuation.function.params.begin.v
      push: __params__
    - match: '{{re_name_package}}\s*(\()'
      captures:
        1: entity.name.object.v
        2: entity.name.function.v
        3: punctuation.function.params.begin.v
      push: __params__

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - meta_scope: meta.import.v
        - match: '{{re_name_package}}'
          scope: entity.name.namespace.v
          push:
            - match: \b(as)\b
              scope: keyword.other.alias.v
              push:
                - meta_scope: meta.import.alias.v
                - match: '{{re_name_regular}}'
                  scope: entity.name.namespace.alias.v
                - include: EOL
            - include: EOL
        - include: EOL

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - meta_scope: meta.module.v
        - match: '{{re_name_package}}'
          scope: entity.name.namespace.v
        - include: EOL

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - meta_scope: meta.struct.v
        - include: __types_def
        - include: Block
        - include: EOL

  Return:
    - match: \b(return)\b
      scope: keyword.control.return.v
      push:
        - meta_scope: meta.return.v
        - include: Constant
        - include: String
        - include: Flow.if
        - include: Value
        - include: EOL


  # FLOW

  Flow:
    - include: Flow.if
    - include: Flow.else
    - include: Flow.for
    - include: Flow.match

  Flow.if:
    - match: \b(if)\b
      scope: keyword.control.if.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true

  Flow.else:
    - match: \b(else)\b
      scope: keyword.control.else.v
      push:
        - include: Flow.if
        - include: Block
        - match: \s+|$
          pop: true

  Flow.for:
    - match: \b(for)\b
      scope: keyword.control.for.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true

  Flow.match:
    - match: \b(match)\b
      scope: keyword.control.match.v
      push:
        - include: Value
        - include: Block
        - match: \s+|$
          pop: true


  # GRAMMAR

  Block:
    - match: \{
      scope: punctuation.definition.block.begin.v
      push:
        - meta_scope: meta.block.v
        - include: Flow
        - include: Return
        - include: Value
        - include: Block
        - match: \}
          scope: punctuation.definition.block.end.v
          pop: true


  Comments:
    - include: comment_block
    - include: comment_line

  comment_block:
    - match: /\*
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: comment_block
        - include: comment_line
        - match: \*/
          scope: punctuation.comment.end.v
          pop: true

  comment_line:
    - match: //
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.line.double-slash.v
        - include: comment_block
        - include: EOL


  Params:
    - match: \(
      scope: punctuation.definition.params.begin.v
      push: __params__

  __params__:
    - include: Value_min
    - match: '{{re_name_regular}}'
      scope: variable.parameter.v
    - include: __irregular
    - match: \)
      scope: punctuation.definition.params.end.v
      pop: true


  Strings:
    - include: quoted_double
    - include: quoted_single
    - include: literal_char

  quoted_double:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: variable
      - include: escaped_char
      - match: \"|$ ## quick fix
        scope: punctuation.string.double.end.v
        pop: true

  quoted_single:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: variable
      - include: escaped_char
      - match: \'|$ ## quick fix
        scope: punctuation.string.single.end.v
        pop: true

  literal_char:
    - match: '`'
      scope: punctuation.string.literal.begin.v
      push:
      - meta_scope: constant.character.v
      - match: '`'
        scope: punctuation.string.literal.end.v
        pop: true

  variable:
    - match: \$
      scope: string.interpolated.v
      push:
        - meta_scope: string.interpolated.v
        - include: FunctionCall
          pop: true
        - include: __object
          pop: true
        - match: '{{re_name_regular}}'
          scope: variable.other.v
          pop: true
        - match: \{
          scope: punctuation.block.begin.v
          push:
            - meta_scope: meta.block.v
            - match: \}
              pop: true
        - match: \W+|$ ## quick fix
          pop: true

  escaped_char:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v


  Value:
    - include: Value_min
    - match: '{{re_name_regular}}'
      scope: variable.other.v
    - include: __irregular

  Value_min:
    - include: Comments
    - include: Strings
    - match: \b(break|continue|defer)\b
      scope: keyword.control.flow.v
    - match: \b(pub|mut)\b
      scope: storage.modifier.v
    - include: __operator
    - match: '{{re__number}}'
      scope: constant.numeric.v
    - include: __types_def
    - match: \b([A-Z]+)\b
      scope: constant.other.v
    - include: FunctionCall
    - include: __object


  # INFER

  __irregular:
    - match: '{{re_name_irregular}}'
      scope: invalid.illegal.v

  __object:
    - match: '{{re_name_package}}'
      captures:
        1: entity.name.object.v
        2: entity.name.object.property.v

  __operator:
    - match: '{{re_operator}}'
      captures:
        1: keyword.operator.access.v
        2: keyword.operator.assignment.v
        3: keyword.operator.comparation.v
        4: keyword.operator.v

  __types_def:
    - match: '{{re_types}}'
      captures:
        1: keyword.language.v
        2: storage.type.numeric.v
        3: storage.type.primitive.v
        4: storage.type.map.v
        5: storage.type.other.v

  __types_user:
    - match: '{{re_types}}'
      captures:
        1: keyword.language.v
        2: invalid.illegal.v
        3: invalid.illegal.v
        4: invalid.illegal.v
        5: invalid.illegal.v

  EOL:
    - match: $
      pop: true
