%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vsh
first_line_match: ^\b(Module|#!.*/v)\b
foldingStartMarker: \b(const \(|\[|{)\b$
foldingStopMarker: ^\s*(}|\]|\))$
variables:
  re_keywords: \b(enum|interface|go|goto|in|or|none|type)\b

  re_type_primitive: \b(bool|string|rune|byteptr|voidptr)\b
  re_type_numeric: \b(byte|i(?:8|16|nt|64|128)|u(?:16|32|64|128)|f(?:32|64))\b
  re_type: (?:{{re_type_primitive}}|{{re_type_numeric}}|(\w+))

  re_comma: \s?,\s?
  re_number: \b(-)?[0-9]+(\.[0-9]+)*\b
  re_pair: (\w+)\s+(\w+)

  re_param_typed: (\w+)\s+(?:\[\])*{{re_type}}
  re_param_list: (\w+)(?:(?:{{re_comma}})(\w+))?
  re_param_list_typed: '{{re_param_list}}\s+{{re_type}}'
  re_param_multi: '{{re_param_list_typed}}(?:{{re_comma}}{{re_param_list_typed}})'

contexts:
  main:
    - include: __comments
    - include: __quotes
    - include: __statements

    - match: \b{{re_keywords}}\b
      scope: keyword.v


  __comments:
    - match: //
      scope: punctuation.definition.comment.v
      set:
        - meta_scope: comment.line.double-slash.v
        - match: $
          pop: true

    - match: /\*
      scope: punctuation.definition.comment.v
      set:
        - meta_scope: comment.block.v
        - match: /\*
          push: comment_block_nested
        - match: \*/
          pop: true

  comment_block_nested:
    - meta_scope: comment.block.nested.v
    - match: /\*
      push: comment_block_nested
    - match: \*/
      pop: true


  __constants:
    - match: '{{re_number}}'
      scope: constant.numeric.v
    - match: \b(true|false|[A-Z]+)\b
      scope: constant.language.v


  __quotes:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push: double_quoted_string
    - match: \'
      scope: punctuation.definition.string.begin.v
      push: single_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.v
    - match: \\[a-z]
      scope: constant.character.escape.v
    - match: \"
      scope: punctuation.definition.string.end.v
      pop: true
  single_quoted_string:
    - meta_scope: string.quoted.single.v
    - match: \\[a-z]
      scope: constant.character.escape.v
    - match: \'
      scope: punctuation.definition.string.end.v
      pop: true



  # STATEMENTS

  # __flow:
  #   - include: __flow_if
  #   - include: __flow_for

  # __flow_if:
  #   - match: \bif\b
  #     scope: keyword.control.if.v
  #     set:
  #       - meta_scope: flow.if
  #       - match: \{
  #         push:
  #           - meta_scope: flow.if.body
  #           - include: __flow
  #           - include: __return
  #           - match: \}
  #             set:
  #               - match: \belse\b
  #                 scope: keyword.control.else.v
  #                 push:
  #                   - meta_scope: else
  #                   -
  #               - match: \}
  #                 pop: true
  #       - match: $
  #         pop: true
  #   - match: $
  #     pop: true

  # __flow_for:
  #   - match: \bfor\b
  #     scope: keyword.control.for.v
  #     set:
  #       - meta_scope: flow.for
  #       - match: \{
  #         push:
  #           - meta_scope: flow.for.body
  #           - match: \}
  #             pop: true
  #   - match: $
  #     pop: true

  __function:
    - match: \b(pub\s+)?(fn)\b
      captures:
        1: storage.modifier.v
        2: keyword.declaration.function.v
      set:
        - meta_scope: function
        - match: \(
          push:
            - meta_scope: function.target
            - include: infer_type_single
            - match: \)
              pop: true
        - match: \b[a-z_]+\b
          scope: entity.name.function.v
          set:
            - match: \(
              push:
                - meta_scope: function.params
                - include: infer_type_multi
                - match: \)
                  pop: true
            - match: \w+
              scope: entity.name.type.v
              set:
                - match: \{
                  push:
                    - meta_scope: function.body
                    - include: __comments
                    # - include: __flow
                    - include: __return
                    - match: \}
                      pop: true
                - match: $
                  pop: true
        - match: $
          pop: true

  __import:
    - match: \bimport\b
      scope: keyword.declaration.import.v
      set:
        - meta_scope: import
        - match: \w+
          scope: variable.other.namespace.v
          set:
            - match: \bas\b
              scope: keyword.other.alias.v
              push:
                - meta_scope: import.alias
                - match: '[a-z]+'
                  scope: variable.other.namespace.alias.v
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true

  __module:
    - match: \bmodule\b
      scope: keyword.declaration.namespace.v
      set:
        - meta_scope: module
        - match: \w+
          scope: variable.other.namespace.v
          pop: true
    - match: $
      pop: true

  __struct:
    - match: \bstruct\b
      scope: keyword.declaration.struct.v
      set:
        - meta_scope: struct
        - match: \w+
          scope: entity.name.type.v
          set:
            - match: \{
              set:
                - meta_scope: struct.body
                - include: __comments
                - include: infer_type_single
                - match: (pub|mut)
                  scope: storage.modifier.v
                - match: \}
                  pop: true
            - match: $
              pop: true
        - match: $
          pop: true

  __statements:
    # - include: __flow
    - include: __function
    - include: __import
    - include: __module
    - include: __struct


  # FLOW

  # - match: \b(if|else|for)\b
  #   scope: keyword.control.v

  # - match: \b(pub|mut|const|var)\b
  #   scope: storage.modifier.v

  # - match: \b(match|defer|break|continue)\b
  #   scope: keyword.control.flow.v


  # INNER

  __return:
    - match: return
      scope: keyword.control.return.v
      set:
        - meta_scope: return
        - include: __constants
        - match: \w+
          set:
            - meta_scope: return.value
            - match: $
              pop: true
        # - match: \{
        #   push:
        #     - meta_scope: return.body
        #     - match: \}
        #       pop: true
        - match: $
          pop: true


  # UTILS

  infer_type_single:
    - match: '(?:\b(mut)\b\s+)?{{re_param_typed}}'
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: storage.type.primitive.v
        4: storage.type.numeric.v
        5: entity.name.type.v

  infer_type_multi:
    - match: (?:(mut)\s+)?{1}{{re_param_list_typed}}
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: variable.parameter.v
        4: storage.type.primitive.v
        5: storage.type.numeric.v
        6: entity.name.type.v
        7: variable.parameter.v
        8: variable.parameter.v
        9: storage.type.primitive.v
        10: storage.type.numeric.v
        11: entity.name.type.v
