%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vv
  - vsh
first_line_match: ^(\bModule\b|#!\S*/v)
foldingStartMarker: '^.*[{\[\(]$'
foldingStopMarker: '^[)]}]$'

variables:
  re_op_access: \b(in)\b
  re_op_assign: (\:=|\:|=)
  re_op_compare: (<=|>=|<|>)
  re_op_other: (<<|>>|\*=|/=|&=|%=|+=|-=|\*|/|&|%|+|-)
  re_operator: '(?:{{re_op_access}}|{{re_op_assign}}|{{re_op_compare}}|{{re_op_other}})'

  re__escaped: '\\([\\tvnrbfae''"]|x\h{2}|\d{,3})'

  re_name_package: '(?:{{re_name_regular}}\.)*{{re_name_regular}}'
  re_name_regular: \b([a-z][a-z\d_]*)\b
  re_name_irregular: \b([A-Za-z][A-Za-z\d_]+)\b

  re_type_numeric: \b(byte|u(?:16|32|64|128)|i(?:nt|16|64|128|8)|f(?:32|64))\b
  re_type_primitive: \b(bool|byteptr|rune|string|voidptr)\b
  re_type_class: ([A-Z][A-Za-z\d_]*)

  re_types: '(?:\b(pub|mut)\b|{{re_type_numeric}}|{{re_type_primitive}}|\b(this|self)\b|\b(map)\b|{{re_type_class}})'

contexts:
  main:
    - include: Const
    - include: Function
    - include: Import
    - include: Module
    - include: Struct

    - include: Comments
    - include: Strings


  # KEYWORDS

  Const:
    - match: \b(const)\b
      scope: keyword.declaration.constant.v
      push:
        - meta_scope: meta.const
        - match: \(
          scope: punctuation.const.body.begin.v
          push:
            - meta_scope: meta.const.body
            - include: Association
            - match: \)
              scope: punctuation.const.body.end.v
              pop: true
        - include: EOL

  Function:
    - match: (\bpub\b\s+)?(\bfn\b)
      captures:
        1: storage.modifier.v
        2: keyword.declaration.function.v
      push:
        - meta_scope: meta.function
        - include: __infer_params
        - match: '{{re_name_regular}}'
          scope: entity.name.function.v
          push:
            - include: __infer_params
            - include: __infer_type
            - match: '{{re_name_regular}}'
              scope: storage.type.other.v
            - include: __irregular
            - include: Block
            - include: EOL
        - include: EOL

  Import:
    - match: \b(import)\b
      scope: keyword.declaration.import.v
      push:
        - meta_scope: meta.import
        - match: '{{re_name_package}}'
          scope: entity.name.namespace.v
          push:
            - match: \b(as)\b
              scope: keyword.other.alias.v
              push:
                - meta_scope: meta.import.alias
                - match: '{{re_name_regular}}'
                  scope: entity.name.namespace.alias.v
                - include: EOL
            - include: EOL
        - include: EOL

  Module:
    - match: \b(module)\b
      scope: keyword.declaration.namespace.v
      push:
        - meta_scope: meta.module
        - match: '{{re_name_package}}'
          scope: entity.name.namespace
        - include: EOL

  Struct:
    - match: \b(struct)\b
      scope: keyword.declaration.struct.v
      push:
        - meta_scope: meta.struct
        - include: __infer_type
        - include: Block
        - include: EOL

  Return:
    - match: \b(return)\b
      scope: keyword.control.return.v
      push:
        - meta_scope: meta.return
        - include: Constant
        - include: String
        - include: Value
        - include: EOL


  # FLOW

  # - match: \b(if|else|for)\b
  #   scope: keyword.control.v

  # - match: \b(pub|mut|const|var)\b
  #   scope: storage.modifier.v

  # - match: \b(match|defer|break|continue)\b
  #   scope: keyword.control.flow.v

  Flow:
    - include: Flow.if
    - include: Flow.for
  #   - include: Flow.match

  Flow.if:
    - match: \b(if)\b
      scope: keyword.control.if.v
      push:
        - meta_scope: flow.if
        - include: Block
        - include: Return
        - match: \b(else)\b
          push:
            - meta_scope: flow.else
            - include: Block
            - include: Return
            - match: $
              pop: true
        - include: EOL

  Flow.for:
    - match: \b(for)\b
      scope: keyword.control.for.v
      push:
        - meta_scope: flow.for
        - include: Block
        - include: EOL


  # GRAMMAR

  Association:
    - match: \b(pub|mut)\b
      scope: storage.modifier.v
    - match: \b([A-Z]+)\b
      scope: constant.other.v
      push:
        - meta_scope: meta.infer.constant
        - include: __infer_type_with_op
    - match: '{{re_types}}'
      scope: invalid.illegal.v
      push:
        - meta_scope: meta.infer.invalid
        - include: __infer_type_with_op
    - match: '{{re_name_regular}}'
      scope: constant.other.v
      push:
        - meta_scope: meta.infer.variable
        - include: __infer_type_with_op
    - include: __irregular
      push:
        - meta_scope: meta.infer.variable.irregular
        - include: __infer_type_with_op


  Block:
    - match: \{
      scope: punctuation.block.begin.v
      push:
        - meta_scope: meta.block
        - include: Comments
        - include: Strings
        - include: Flow
        - include: Return
        - include: Association
        - include: Block
        - match: \}
          scope: punctuation.block.end
          pop: true


  Comments:
    - include: comment_block
    - include: comment_line

  comment_block:
    - match: /\*
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.block.v
        - include: comment_block
        - include: comment_line
        - match: \*/
          scope: punctuation.comment.end.v
          pop: true

  comment_line:
    - match: //
      scope: punctuation.comment.begin.v
      push:
        - meta_scope: comment.line.double-slash.v
        - include: comment_block
        - include: EOL


  Strings:
    - include: quoted_double
    - include: quoted_single
    - include: literal_char

  quoted_double:
    - match: \"
      scope: punctuation.string.double.begin.v
      push:
      - meta_scope: string.quoted.double.v
      - include: escaped_char
      - match: \"
        scope: punctuation.string.double.end.v
        pop: true

  quoted_single:
    - match: \'
      scope: punctuation.string.single.begin.v
      push:
      - meta_scope: string.quoted.single.v
      - include: escaped_char
      - match: \'
        scope: punctuation.string.single.end.v
        pop: true

  literal_char:
    - match: \`
      scope: punctuation.string.literal.begin.v
      push:
      - match: \b\w\b
        scope: string.literal.v
      - match: \b\S+\b
        scope: invalid.illegal.v
      - match: \`
        scope: punctuation.string.literal.end.v
        pop: true

  escaped_char:
    - match: '{{re__escaped}}'
      scope: constant.character.escape.v


  Value:
    # some.fun(
    - match: '(?:{{re_name_regular}}\.)?{{re_name_regular}}\s*\('
    # mirror: __infer_params
      captures:
        1: entity.other.object.v
        2: entity.name.function.v
      scope: punctuation.function.params.begin.v
      push:
        - meta_scope: meta.function.params
        - include: __infer_type
        - match: '{{re_name_regular}}'
          scope: variable.parameter.v
        - include: __irregular
        - match: \)
          scope: punctuation.function.params.end.v
          pop: true
    # some.val
    - match: '(?:{{re_name_regular}}\.)+{{re_name_regular}}'
      captures:
        1: entity.other.object.v
        2: entity.other.object.property.v
    # val
    - match: '{{re_name_regular}}'
      scope: variable.other.v
    - include: __irregular
    # - include: Type.any
    #   push: Struct.new


  # INFER

  __irregular:
    - match: '{{re_name_irregular}}'
      scope: invalid.illegal.v

  __infer_function:
    - match: '{{re_name_package}}\s*(\()'
      captures:
        1: variable.other.object.v
        2: entity.name.function.v
        3: punctuation.function.params.begin.v
      push:
        - include: __infer_params__inside

  __infer_type:
    - match: '{{re_types}}'
      captures:
        1: keyword.language.v
        2: storage.type.numeric.v
        3: storage.type.primitive.v
        4: storage.type.map.v
        5: storage.type.other.v

  __infer_params:
    - match: \(
      scope: punctuation.function.params.begin.v
      push: __infer_params__inside

  __infer_params__inside:
      - include: Value_min
      - match: '{{re_name_regular}}'
        scope: variable.parameter.v
      - include: __irregular
      - match: \)
        scope: punctuation.function.params.end.v
        pop: true

  EOL:
    - match: $
      pop: true
