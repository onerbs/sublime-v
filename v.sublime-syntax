%YAML 1.2
---
name: V
scope: source.v
file_extensions:
  - v
  - vsh
first_line_match: ^\b(Module|#!.*/v)\b
foldingStartMarker: \b(const \(|\[|{)\b$
foldingStopMarker: ^\s*(}|\]|\))$
variables:
  re_keywords: \b(enum|interface|go|goto|in|or|none|return)\b
  re_primitive: \b(bool|string|rune|byteptr|voidptr)\b
  re_numeric: \b(byte|i(?:8|16|nt|64|128)|u(?:16|32|64|128)|f(?:32|64))\b
  re_type: (?:{{re_primitive}}|{{re_numeric}}|(\w+))

  re_comma: \s?,\s?
  re_pair: (\w+)\s+(\w+)

  re_param_typed: (\w+)\s+{{re_type}}
  re_param_list: (\w+)(?:(?:{{re_comma}})(\w+))?
  re_param_list_typed: '{{re_param_list}}\s+{{re_type}}'
  re_param_multi: '{{re_param_list_typed}}(?:{{re_comma}}{{re_param_list_typed}})'

contexts:
  main:
    - match: \"
      scope: punctuation.definition.string.begin.v
      push: double_quoted_string

    - match: \'
      scope: punctuation.definition.string.begin.v
      push: single_quoted_string

    - include: __comment

    - match: \b(module)\b\s+(\w+)
      captures:
        1: keyword.declaration.namespace.v
        2: variable.other.namespace.v

    - match: import
      scope: keyword.control.import.v
      push: import__

    - match: struct
      scope: keyword.declaration.struct.v
      push: struct__

    - match: \b(pub\s+)(fn)\b
      captures:
        1: storage.modifier.v
        2: keyword.declaration.function.v
      push: fn__

    # - match: \b{{re_keywords}}\b
    #   scope: keyword.v

    # - match: \s*(\w+)\s+(\w+)$
    #   captures:
    #     1: variable.other.v
    #     2: storage.type.v

    # - match: type
    #   scope: keyword.control.type.v

    # - match: \b(pub|mut|const|var)\b
    #   scope: storage.modifier.v

    # - match: \b{{re_primitive}}\b
    #   scope: storage.type.primitive.v

    # - match: \b{{re_numeric}}\b
    #   scope: storage.type.numeric.v

    # - match: \b(if|else|for)\b
    #   scope: keyword.control.v

    # - match: \b(match|defer|break|continue)\b
    #   scope: keyword.control.flow.v

    - match: \b(-)?[0-9]+(.[0-9]+)*\b
      scope: constant.numeric.v

  double_quoted_string:
    - meta_scope: string.quoted.double.v
    - match: \\.
      scope: constant.character.escape.v
    - match: \"
      scope: punctuation.definition.string.end.v
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.v
    - match: \\.
      scope: constant.character.escape.v
    - match: \'
      scope: punctuation.definition.string.end.v
      pop: true

  __comment:
    - match: //
      scope: punctuation.definition.comment.v
      push: line_comment
    - match: /\*
      scope: punctuation.definition.comment.v
      push: block_comment

  line_comment:
    - meta_scope: comment.line.v
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.v
    - match: /\*
      push: block_comment
    - match: \*/
      pop: true

  import__:
    - meta_scope: import
    - match: (\w+)(?:\s+\b(as)\b\s+(\w+))?
      captures:
        1: variable.other.namespace.v
        2: keyword.declaration.alias.v
        3: variable.other.namespace.alias.v
      pop: true
    - match: $
      pop: true

  struct__:
    - meta_scope: struct
    - match: (\w+)
      scope: storage.type.v
    - match: \{
      push: struct__body
    - match: $
      pop: true

  struct__body:
    - meta_scope: struct.body
    - include: __comment
    - include: infer_type_min
    - match: (pub|mut)
      scope: storage.modifier.v
    - match: \}
      pop: true

  fn__:
    - meta_scope: function
    - match: \(
      push: fn__target
    - match: (\w+)\s?\(
      captures:
        1: entity.name.function.v
      push: fn__params
    - match: (\w+)?\s?\{
      captures:
        1: storage.type.v
      push: fn__body
    - match: $
      pop: true

  fn__target:
    - meta_scope: function.target
    - include: infer_type_min
    - match: \)
      pop: true

  fn__params:
    - meta_scope: function.signature
    - include: infer_type_multi
    - match: \)
      pop: true

  fn__body:
    - meta_scope: function.body
    - include: __comment
    - include: __return
    - match: \}
      pop: true

  __return:
    - match: return
      scope: keyword.return.v
      push: return__

  return__:
    - meta_scope: return
    - match: \{
      push: return__body
    - match: $
      pop: true

  return__body:
    - meta_scope: return.body
    - match: \}
      pop: true

  infer_type_min:
    - match: '(?:(mut)\s+)?{1}{{re_param_typed}}'
      captures:
        1: storage.modifier.v
        2: constant.other.v
        3: storage.type.primitive.v
        4: storage.type.numeric.v
        5: storage.type.v

  infer_type_single:
    - match: '(?:(mut)\s+)?{1}{{re_param_typed}}'
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: storage.type.primitive.v
        4: storage.type.numeric.v
        5: storage.type.v

  infer_type_multi:
    - match: (?:(mut)\s+)?{1}{{re_param_list_typed}}
      captures:
        1: storage.modifier.v
        2: variable.parameter.v
        3: variable.parameter.v
        4: storage.type.primitive.v
        5: storage.type.numeric.v
        6: storage.type.v
        7: variable.parameter.v
        8: variable.parameter.v
        9: storage.type.primitive.v
        10: storage.type.numeric.v
        11: storage.type.v



    # - match: ^\s*(import)\s+(\w+(?:\.\w+)?)(?:\s+(as)\s+(\w+))
    #   captures:
    #     1: keyword.control.import.v
    #     2: variable.other.namespace.v
    #     3: keyword.v
    #     4: variable.other.namespace.alias.v
